{"version":3,"sources":["assets sync /^/.//.*/.png$","assets/coding.png","assets/family.png","assets/food.png","assets/iceberg1.png","assets/iceberg2.png","assets/music.png","assets/music1.png","assets/politics.png","assets/politics2.png","lib/colors.js","containers/HomeScreen.js","lib/config.js","containers/RoomIntroScreen.js","lib/questions.js","containers/QuestionRankerScreen.js","containers/RoomScreen.js","containers/MatchedUserScreen.js","App.js","serviceWorker.js","index.js","assets/iceberg3.png"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","app","appInverse","logo","tagline","subtitle","label","superlike","like","dislike","indifferent","HomeScreenContainer","styled","div","LogoContainer","Logo","LogoImage","img","LogoText","colors","Tagline","ButtonsContainer","ButtonContainer","ButtonSubtitle","HomeScreen","this","props","roomNameHint","onStartCreateRoom","onStartJoinRoom","onClickLogo","joinRoomButtonText","length","src","logoAsset","resizeMode","onClick","Button","block","variant","size","Component","CONFIG","window","config","token","api","port","API","StyledForm","Form","FieldContainer","FieldLabel","StyledField","Field","StyledErrorMessage","SubmitButton","RoomIntroScreen","generateRoomCode","result","characters","charactersLength","i","charAt","Math","floor","random","onSubmitRoomDetails","values","formik","a","roomSelection","onJoinRoom","roomCode","roomName","userName","userDescription","console","log","createUrl","encodeURI","fetch","response","json","responseJson","error","setFieldError","checkUrl","meta","state","generatedRoomCode","userNameHint","roomCodeHint","roomNameInput","htmlFor","name","type","placeholder","render","msg","initialValues","validationSchema","Yup","min","max","required","onSubmit","setFieldValue","autoCorrect","autoCapitalize","maxLength","onChange","event","target","value","toUpperCase","disabled","component","rows","QUESTIONS","q1","questionId","prompt","topics","image","q2","q3","q4","q5","ORDERED_QUESTIONS","QuestionRankerScreenContainer","CardBody","CardContainer","center","visible","css","lastRanking","CardText","CardImage","ButtonsRowContainer","QuestionRankerScreen","onRank","ranking","onRankAll","inProgressQuestionRankings","cardIndex","currentQuestionId","newCardIndex","updatedInProgressQuestionRankings","setState","questionRankings","renderCard","index","currentQuestion","key","trackMouse","onSwipedLeft","onSwipedRight","onSwipedUp","onSwipedDown","require","renderButtons","onEnterRoom","color","style","transform","cardBody","RoomScreen","onRetakeQuestionRanker","MatchedUserScreen","AppContainer","Header","header","navigating","navigatedBack","BackButtonContainer","socket","io","PAGES","keymirror","Home","RoomIntro","QuestionRanker","Room","MatchedUser","App","hydrateFromLocalStorage","userId","localStorage","getItem","userQuestionRankings","JSON","parse","userMatches","modifiedId","uuid","replace","setItem","saveUserRoom","saveUserQuestionRankings","stringify","saveUserMatches","matches","onConnectSocket","emit","onDevReset","devResetCount","newDevResetCount","removeItem","location","reload","navigate","room","user","onBack","page","onRankAllQuestions","onUpdateMatches","users","currentUserMatches","matchId","includes","otherUserId","goingBack","setTimeout","on","data","backButton","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f411af7.chunk.js","sourcesContent":["var map = {\n\t\"./coding.png\": 328,\n\t\"./family.png\": 329,\n\t\"./food.png\": 330,\n\t\"./iceberg1.png\": 331,\n\t\"./iceberg2.png\": 332,\n\t\"./iceberg3.png\": 79,\n\t\"./music.png\": 333,\n\t\"./music1.png\": 334,\n\t\"./politics.png\": 335,\n\t\"./politics2.png\": 336\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 327;","module.exports = __webpack_public_path__ + \"static/media/coding.e5e233cc.png\";","module.exports = __webpack_public_path__ + \"static/media/family.411f2f65.png\";","module.exports = __webpack_public_path__ + \"static/media/food.318be3a0.png\";","module.exports = __webpack_public_path__ + \"static/media/iceberg1.e59d76d5.png\";","module.exports = __webpack_public_path__ + \"static/media/iceberg2.1e748262.png\";","module.exports = __webpack_public_path__ + \"static/media/music.8661492c.png\";","module.exports = __webpack_public_path__ + \"static/media/music1.9dc45298.png\";","module.exports = __webpack_public_path__ + \"static/media/politics.f7f6763b.png\";","module.exports = __webpack_public_path__ + \"static/media/politics2.7dc24b21.png\";","export default {\n  app: '#282c34',\n  appInverse: 'white',\n  logo: 'orange',\n  tagline: '#007bff',\n  subtitle: 'rgb(183, 194, 207)',\n  label: '#007bff',\n\n  superlike: 'blue',\n  like: 'green',\n  dislike: 'red',\n  indifferent: 'gray',\n};\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Button } from 'react-bootstrap';\n\nimport logoAsset from '../assets/iceberg3.png';\nimport colors from '../lib/colors';\n\nconst HomeScreenContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  width: 100%;\n`;\n\nconst LogoContainer = styled.div`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nconst Logo = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst LogoImage = styled.img`\n  height: auto;\n  width: 100%;\n  margin-bottom: 10px;\n`;\n\nconst LogoText = styled.div`\n  position: absolute;\n  top: 30%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-family: AppleSDGothicNeo-Bold;\n  font-size: 28px;\n  text-align: center;\n  color: ${colors.logo};\n  text-shadow: 2px 2px 4px #000000;\n`;\n\nconst Tagline = styled.div`\n  color: ${colors.tagline};\n  font-family: AppleSDGothicNeo-Regular;\n  font-size: 16px;\n  text-align: center;\n  line-height: 1.25;\n`;\n\nconst ButtonsContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: space-around;\n`;\n\nconst ButtonContainer = styled.div`\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst ButtonSubtitle = styled.div`\n  color: ${colors.subtitle};\n  font-family: AppleSDGothicNeo-Light;\n  font-size: 16px;\n`;\n\nexport default class HomeScreen extends Component {\n  render() {\n    const { roomNameHint, onStartCreateRoom, onStartJoinRoom, onClickLogo } = this.props;\n    const joinRoomButtonText =\n      roomNameHint != null && roomNameHint.length > 0\n        ? `Join Room (${roomNameHint}?)`\n        : 'Join Room';\n    return (\n      <HomeScreenContainer>\n        <LogoContainer>\n          <Logo>\n            <LogoImage src={logoAsset} resizeMode=\"contain\" />\n            <LogoText onClick={onClickLogo}>{'Icebreaker'}</LogoText>\n          </Logo>\n          <Tagline>{'The easy way to break the ice'}</Tagline>\n          <Tagline>{'and make better connections'}</Tagline>\n        </LogoContainer>\n        <ButtonsContainer>\n          <ButtonContainer>\n            <Button block variant=\"primary\" size=\"lg\" onClick={onStartJoinRoom}>\n              {joinRoomButtonText}\n            </Button>\n            <ButtonSubtitle>{'Make your entrance and meet some people!'}</ButtonSubtitle>\n          </ButtonContainer>\n          <ButtonContainer>\n            <Button block variant=\"primary\" size=\"lg\" onClick={onStartCreateRoom}>\n              {'Create Room'}\n            </Button>\n            <ButtonSubtitle>{\"Let's get this party started!\"}</ButtonSubtitle>\n          </ButtonContainer>\n        </ButtonsContainer>\n      </HomeScreenContainer>\n    );\n  }\n}\n","export const CONFIG = window.config || {\n  token: '((( DEFAULT DEV ENV )))',\n  api: 'http://localhost',\n  port: 8000,\n};\nexport const API = `${CONFIG.api}${CONFIG.port ? `:${CONFIG.port}` : ''}`;\n","import React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport { Button } from 'react-bootstrap';\n\nimport colors from '../lib/colors';\nimport { API } from '../lib/config';\n\nconst StyledForm = styled(Form)`\n  flex: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FieldContainer = styled.div`\n  width: 100%;\n  margin-bottom: 20px;\n`;\n\nconst FieldLabel = styled.div`\n  font-size: 20px;\n  color: ${colors.label};\n  text-align: left;\n`;\n\nconst StyledField = styled(Field)`\n  width: 100%;\n  font-size: 20px;\n  padding: 5px 10px;\n\n  :disabled {\n    color: #aaa;\n  }\n`;\n\nconst StyledErrorMessage = styled.div`\n  color: red;\n  text-align: left;\n  font-size: 20px;\n`;\n\nconst SubmitButton = styled(Button)`\n  margin-top: 20px;\n`;\n\nexport default class RoomIntroScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      generatedRoomCode: props.roomSelection === 'create' ? this.generateRoomCode() : '',\n    };\n  }\n\n  generateRoomCode = (length = 6) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  };\n\n  onSubmitRoomDetails = async (values, formik) => {\n    const { roomSelection, onJoinRoom } = this.props;\n    const { roomCode, roomName, userName, userDescription } = values;\n\n    if (roomSelection === 'create') {\n      console.log(`Attempting to create room with code: ${roomCode}`);\n      const createUrl = encodeURI(`${API}/createRoom?roomCode=${roomCode}&roomName=${roomName}`);\n      const response = await fetch(createUrl);\n      const responseJson = await response.json();\n      const { error } = responseJson;\n      if (error === true) {\n        formik.setFieldError('roomCode', 'Room already exists! Refresh page.');\n      } else {\n        onJoinRoom({ roomCode, roomName }, { userName, userDescription });\n      }\n    } else if (roomSelection === 'join') {\n      console.log(`Attempting to join room with code: ${roomCode}`);\n      const checkUrl = encodeURI(`${API}/checkRoom?roomCode=${roomCode}`);\n      const response = await fetch(checkUrl);\n      const responseJson = await response.json();\n      const { error, meta } = responseJson;\n      if (error === true) {\n        formik.setFieldError('roomCode', 'Room code does not exist!');\n      } else {\n        const { roomName } = meta;\n        onJoinRoom({ roomCode, roomName }, { userName, userDescription });\n      }\n    }\n  };\n\n  render() {\n    const { userNameHint, roomCodeHint, roomSelection } = this.props;\n    const { generatedRoomCode } = this.state;\n\n    let roomNameInput = null;\n    if (roomSelection === 'create') {\n      roomNameInput = (\n        <FieldContainer>\n          <FieldLabel htmlFor=\"roomName\">{'Room Name'}</FieldLabel>\n          <StyledField name=\"roomName\" type=\"text\" placeholder=\"(optional)\" />\n          <ErrorMessage\n            name=\"roomName\"\n            render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n          />\n        </FieldContainer>\n      );\n    }\n\n    return (\n      <Formik\n        initialValues={{\n          roomCode:\n            roomSelection === 'create'\n              ? generatedRoomCode\n              : roomCodeHint == null\n              ? ''\n              : roomCodeHint,\n          roomName: '',\n          userName: userNameHint == null ? '' : userNameHint,\n          userDescription: '',\n        }}\n        validationSchema={Yup.object({\n          roomCode: Yup.string()\n            .min(6, 'Must be 6 characters')\n            .max(6, 'Must be 6 characters')\n            .required('*Required'),\n          userName: Yup.string().required('*Required'),\n          userDescription: Yup.string().required('*Required'),\n        })}\n        onSubmit={this.onSubmitRoomDetails}\n      >\n        {({ setFieldValue }) => (\n          <StyledForm>\n            <FieldContainer>\n              <FieldLabel htmlFor=\"roomCode\">{`Room Code${\n                roomSelection === 'create' ? ' (autogenerated)' : ''\n              }`}</FieldLabel>\n              <StyledField\n                name=\"roomCode\"\n                type=\"text\"\n                autoCorrect=\"off\"\n                autoCapitalize=\"characters\"\n                maxLength={6}\n                placeholder=\"Enter 6-letter event code\"\n                onChange={event => setFieldValue('roomCode', event.target.value.toUpperCase())}\n                disabled={roomSelection === 'create'}\n              />\n              <ErrorMessage\n                name=\"roomCode\"\n                render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n              />\n            </FieldContainer>\n            {roomNameInput}\n            <FieldContainer>\n              <FieldLabel htmlFor=\"userName\">Your Name</FieldLabel>\n              <StyledField name=\"userName\" autoCorrect=\"off\" />\n              <ErrorMessage\n                name=\"userName\"\n                render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n              />\n            </FieldContainer>\n            <FieldContainer>\n              <FieldLabel htmlFor=\"userDescription\">What do you look like?</FieldLabel>\n              <StyledField\n                name=\"userDescription\"\n                component=\"textarea\"\n                autoCorrect=\"off\"\n                rows={3}\n                placeholder={'e.g., Blonde. Wearing red fedora. Sizeable front teeth.'}\n              />\n              <ErrorMessage\n                name=\"userDescription\"\n                render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n              />\n            </FieldContainer>\n            <SubmitButton variant=\"primary\" size=\"lg\" type=\"submit\" block>\n              {\"Let's do this!\"}\n            </SubmitButton>\n          </StyledForm>\n        )}\n      </Formik>\n    );\n  }\n}\n","const QUESTIONS = {\n  q1: {\n    questionId: 'q1',\n    prompt: 'Do you think that people should have the freedom to blah blah blah?  1',\n    topics: ['testTopic1', 'testTopic2'],\n    image: 'politics',\n  },\n  q2: {\n    questionId: 'q2',\n    prompt: 'Do you think that people should have the freedom to blah blah blah?  2',\n    topics: ['testTopic2'],\n    image: 'music',\n  },\n  q3: {\n    questionId: 'q3',\n    prompt: 'Do you think that people should have the freedom to blah blah blah?  3',\n    topics: ['testTopic4', 'testTopic5'],\n    image: 'family',\n  },\n  q4: {\n    questionId: 'q4',\n    prompt: 'Do you think that people should have the freedom to blah blah blah?  4',\n    topics: ['testTopic4'],\n    image: 'food',\n  },\n  q5: {\n    questionId: 'q5',\n    prompt: 'Do you think that people should have the freedom to blah blah blah?  5',\n    topics: ['testTopic5'],\n    image: 'coding',\n  },\n};\n\nexport const ORDERED_QUESTIONS = Object.keys(QUESTIONS);\nexport default QUESTIONS;\n","import React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Swipeable } from 'react-swipeable';\nimport { Button } from 'react-bootstrap';\nimport { GoThumbsup, GoThumbsdown } from 'react-icons/go';\nimport { GiStarFormation, GiShrug } from 'react-icons/gi';\n\nimport QUESTIONS, { ORDERED_QUESTIONS } from '../lib/questions';\nimport colors from '../lib/colors';\n\nconst QuestionRankerScreenContainer = styled.div`\n  flex: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst CardBody = styled.div`\n  position: relative;\n  padding-top: 100%;\n  width: 100%;\n  display: flex;\n`;\n\nconst CardContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  border-radius: 10px;\n  background-color: white;\n  padding: 20px;\n  margin-bottom: 30px;\n  ${({ center }) => (center === true ? 'justify-content: center;' : '')}\n  ${({ visible }) =>\n    visible === true\n      ? `\n          transition: opacity 500ms;\n          opacity: 1;\n          transform: translateX(0) translateY(0);\n        `\n      : css`\n          transition: opacity 500ms, transform 500ms;\n          opacity: 0;\n          ${props => {\n            const { lastRanking } = props;\n            switch (lastRanking) {\n              case 'like': {\n                return 'transform: translateX(100px);';\n              }\n              case 'dislike': {\n                return 'transform: translateX(-100px);';\n              }\n              case 'superlike': {\n                return 'transform: translateY(-100px);';\n              }\n              case 'indifferent': {\n                return 'transform: translateY(100px);';\n              }\n              default: {\n                return '';\n              }\n            }\n          }}\n        `}\n`;\n\nconst CardText = styled.div`\n  text-align: center;\n  font-size: 24px;\n  color: black;\n  line-height: 1.15;\n`;\n\nconst CardImage = styled.img`\n  width: auto;\n  height: 100%;\n  max-height: 50%;\n`;\n\nconst ButtonsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ButtonsRowContainer = styled.div`\n  flex: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n`;\n\nconst ButtonContainer = styled.div`\n  width: 60px;\n  height: 60px;\n  border-radius: 30px;\n  background-color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default class QuestionRankerScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionRankings: {},\n      inProgressQuestionRankings: {},\n      cardIndex: 0,\n      lastRanking: 'left',\n    };\n  }\n\n  onRank = ranking => {\n    const { onRankAll } = this.props;\n    const { inProgressQuestionRankings, cardIndex } = this.state;\n    const currentQuestionId = ORDERED_QUESTIONS[cardIndex];\n    const newCardIndex = cardIndex + 1;\n    const updatedInProgressQuestionRankings = {\n      ...inProgressQuestionRankings,\n      [currentQuestionId]: ranking,\n    };\n\n    if (newCardIndex === ORDERED_QUESTIONS.length) {\n      // Done!\n      this.setState({\n        questionRankings: updatedInProgressQuestionRankings,\n        inProgressQuestionRankings: {},\n        cardIndex: newCardIndex,\n        lastRanking: ranking,\n      });\n      onRankAll(updatedInProgressQuestionRankings);\n    } else if (newCardIndex < ORDERED_QUESTIONS.length) {\n      // Some more left to go!\n      this.setState({\n        cardIndex: newCardIndex,\n        inProgressQuestionRankings: updatedInProgressQuestionRankings,\n        lastRanking: ranking,\n      });\n    }\n  };\n\n  renderCard = (questionId, index) => {\n    const { cardIndex, lastRanking } = this.state;\n    const currentQuestion = QUESTIONS[questionId];\n    const { prompt, image } = currentQuestion;\n    return (\n      <Swipeable\n        key={questionId}\n        trackMouse\n        onSwipedLeft={() => this.onRank('dislike')}\n        onSwipedRight={() => this.onRank('like')}\n        onSwipedUp={() => this.onRank('superlike')}\n        onSwipedDown={() => this.onRank('indifferent')}\n      >\n        <CardContainer visible={index === cardIndex} lastRanking={lastRanking}>\n          <CardImage src={require(`../assets/${image}.png`)} />\n          <CardText>{prompt}</CardText>\n        </CardContainer>\n      </Swipeable>\n    );\n  };\n\n  renderButtons = () => {\n    const { onEnterRoom } = this.props;\n    const { cardIndex } = this.state;\n\n    if (cardIndex === ORDERED_QUESTIONS.length) {\n      return (\n        <ButtonsContainer>\n          <ButtonsRowContainer>\n            <Button block variant=\"primary\" size=\"lg\" onClick={onEnterRoom}>\n              {'Enter room!'}\n            </Button>\n          </ButtonsRowContainer>\n        </ButtonsContainer>\n      );\n    }\n\n    return (\n      <ButtonsContainer>\n        <ButtonsRowContainer>\n          <ButtonContainer onClick={() => this.onRank('superlike')}>\n            <GiStarFormation size=\"35px\" color={colors.superlike} />\n          </ButtonContainer>\n        </ButtonsRowContainer>\n        <ButtonsRowContainer>\n          <ButtonContainer onClick={() => this.onRank('dislike')}>\n            <GoThumbsdown\n              size=\"35px\"\n              color={colors.dislike}\n              style={{ transform: 'scale(-1, 1)' }}\n            />\n          </ButtonContainer>\n          <ButtonContainer onClick={() => this.onRank('like')}>\n            <GoThumbsup size=\"35px\" color={colors.like} />\n          </ButtonContainer>\n        </ButtonsRowContainer>\n        <ButtonsRowContainer>\n          <ButtonContainer onClick={() => this.onRank('indifferent')}>\n            <GiShrug size=\"35px\" color={colors.indifferent} />\n          </ButtonContainer>\n        </ButtonsRowContainer>\n      </ButtonsContainer>\n    );\n  };\n\n  render() {\n    const { cardIndex } = this.state;\n\n    let cardBody;\n    if (cardIndex === ORDERED_QUESTIONS.length) {\n      cardBody = (\n        <CardContainer visible center>\n          <CardText center>{\"You're done!\"}</CardText>\n        </CardContainer>\n      );\n    } else {\n      cardBody = ORDERED_QUESTIONS.map(this.renderCard);\n    }\n\n    return (\n      <QuestionRankerScreenContainer>\n        <CardBody>{cardBody}</CardBody>\n        <ButtonsContainer>{this.renderButtons()}</ButtonsContainer>\n      </QuestionRankerScreenContainer>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\n// import {\n//   ScrollView,\n//   StyleSheet,\n//   View,\n//   FlatList,\n//   AsyncStorage,\n//   ActivityIndicator,\n// } from 'react-native';\n// import { ExpoLinksView } from '@expo/samples';\n// import { Button, Text, ListItem, Icon } from 'react-native-elements';\n// import Swiper from 'react-native-deck-swiper';\n// import Modal from 'react-native-modal';\n// import _ from 'lodash';\n\n// import { get_room } from '../Firestore';\n// import SAMPLE_ROOM from '../constants/room';\n// import SAMPLE_QUESTIONS from '../constants/questions';\n\nexport default class RoomScreen extends Component {\n  render() {\n    const { onRetakeQuestionRanker } = this.props;\n    return (\n      <>\n        <h2>{'Room user screen'}</h2>\n        <h2>{'IN PROGRESS'}</h2>\n        <Button onClick={onRetakeQuestionRanker}>{'Retake question rankings'}</Button>\n      </>\n    );\n  }\n\n  /*\n  constructor() {\n    super();\n    this.state = {\n      room: {},\n      matches: {},\n    };\n  }\n\n  componentDidMount() {\n    console.log(\n      'Nav params is: ' + JSON.stringify(this.props.navigation.state.params)\n    );\n    // setTimeout(() => this.setState({ canShowModal: true }), 750);\n    console.log('User id is: ' + this.props.navigation.state.params.userId);\n\n    const { navigation } = this.props;\n    console.log('Nav params is: ' + JSON.stringify(navigation.state.params));\n    console.log('User id is: ' + navigation.state.params.userId);\n    let userId = navigation.getParam('userId', null);\n    let roomCode = navigation.getParam('roomId', null);\n    // const roomRef = get_room_ref(roomCode);\n    // let observer = roomRef.onSnapshot(\n    //   newUsersSnapshot => {\n    //     const newUsersData = newUsersSnapshot.data();\n    //     this.setState({ room: newUsersData });\n    //     this.calculateMatches(newUsersData);\n    //     observer();\n    //   },\n    //   error => {\n    //     console.log(`Encountered error: ${err}`);\n    //   }\n    // );\n\n    this.userList = setInterval(() => {\n      get_room(roomCode, data => {\n        console.log(data);\n        this.setState({ room: data });\n        this.calculateMatches(data);\n      });\n    }, 5000);\n\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.userList)\n  }\n\n\n  calculateMatches = async newUsersData => {\n    const { navigation } = this.props;\n    const { users } = newUsersData;\n\n    console.log(newUsersData);\n    if (users == null) {\n      return;\n    }\n\n    let userId = await AsyncStorage.getItem('user-id');\n    const currentUser = users[userId];\n    const currentUserLikedQuestions = _.filter(\n      currentUser.questionRankings,\n      questionRanking => questionRanking === 'like'\n    );\n    const updatedMatches = {};\n    const questionsAnswered = Object.keys(currentUser.questionRankings).length;\n\n    for (let otherUserId in users) {\n      if (otherUserId === userId) {\n        continue;\n      }\n      //   let generatedMatchId;\n      //   if (otherUserId < userId) {\n      //     generatedMatchId = `${otherUserId}||${userId}`;\n      //   } else {\n      //     generatedMatchId = `${userId}||${otherUserId}`;\n      //   }\n      const matchAccumulator = 0;\n      const otherUser = users[otherUserId];\n      const otherUserLikedQuestions = _.filter(\n        currentUser.questionRankings,\n        questionRanking => questionRanking === 'like'\n      );\n      const commonQuestions = _.intersection(\n        otherUserLikedQuestions,\n        currentUserLikedQuestions\n      );\n\n      for (let questionId in currentUser.questionRankings) {\n        const currentUserAnswer = currentUser.questionRankings[questionId];\n        const otherUserAnswer = otherUser.questionRankings[questionId];\n\n        if (currentUserAnswer === 'like' && otherUserAnswer === 'like') {\n          matchAccumulator += 1.0;\n        }\n      }\n\n      const matchStrength = matchAccumulator / questionsAnswered;\n\n      updatedMatches[otherUserId] = {\n        commonQuestions: commonQuestions,\n        matchStrength,\n      };\n    }\n\n    console.log('New matches! ', updatedMatches);\n\n    this.setState({ matches: updatedMatches });\n  };\n\n  onPressUser = user => {\n    console.log('Press user: ', user);\n    this.props.navigation.navigate('MatchedUser', {\n      user: user,\n    });\n  };\n\n  renderUser = ({ item: userId }) => {\n    const { room } = this.state;\n    if (room.users == null) {\n      return null;\n    }\n\n    const { users } = room;\n    const user = users[userId];\n    return (\n      <ListItem\n        title={user.codeName || user.codename}\n        subtitle={user.description}\n        subtitleStyle={{ color: 'gray' }}\n        leftElement={<Icon name=\"smiley\" type=\"octicon\" color=\"blue\" />}\n        bottomDivider\n        chevron\n        onPress={() => this.onPressUser(user)}\n      />\n    );\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const { room, matches } = this.state;\n\n    if (room.users == null) {\n      return (\n        <ActivityIndicator\n          size=\"large\"\n          color=\"#0000ff\"\n          style={{ marginTop: 50 }}\n        />\n      );\n    }\n\n    const { users } = room;\n    const allUsers = Object.keys(users);\n\n    if (allUsers.length === 0) {\n      return (\n        <ActivityIndicator\n          size=\"large\"\n          color=\"#0000ff\"\n          style={{ marginTop: 50 }}\n        />\n      );\n    }\n\n    return (\n      <View style={styles.container}>\n        <FlatList\n          style={styles.container}\n          data={allUsers}\n          renderItem={this.renderUser}\n          keyExtractor={item => item}\n        />\n      </View>\n    );\n  }\n  */\n}\n\nconst styles = {\n  container: {\n    flex: 1,\n    paddingTop: 15,\n    backgroundColor: '#F5FCFF',\n  },\n  card: {\n    flex: 1,\n    width: '90%',\n    borderRadius: 4,\n    borderWidth: 2,\n    borderColor: '#E8E8E8',\n    justifyContent: 'center',\n    alignItems: 'center',\n    alignSelf: 'center',\n    backgroundColor: 'white',\n    padding: 20,\n  },\n  text: {\n    textAlign: 'left',\n    fontSize: 32,\n    backgroundColor: 'transparent',\n  },\n};\n","import React, { Component } from 'react';\n// import {\n//   ScrollView,\n//   StyleSheet,\n//   View,\n//   FlatList,\n//   Image,\n//   Dimensions,\n//   SafeAreaView,\n// } from 'react-native';\n// import { ExpoLinksView } from '@expo/samples';\n// import { Button, Text, ListItem, Icon } from 'react-native-elements';\n// import Swiper from 'react-native-deck-swiper';\n// import Modal from 'react-native-modal';\n\n// import SAMPLE_QUESTIONS from '../constants/questions';\n// import SAMPLE_MATCHES from '../constants/matches';\n// import SAMPLE_USERS from '../constants/users';\n// import { TouchableOpacity } from 'react-native-gesture-handler';\n\n// const TOTAL_NUM_OF_QUESTIONS = Object.keys(SAMPLE_QUESTIONS).length;\n\n// const checkMarkIcon = require('../assets/checkCircle3.png');\n\n// const numColumns = 3;\n// const size = (Dimensions.get('window').width - 50) / numColumns;\nconst size = 10;\n\nexport default class MatchedUserScreen extends Component {\n  render() {\n    return (\n      <>\n        <h2>{'Matched users screen'}</h2>\n        <h2>{'IN PROGRESS'}</h2>\n      </>\n    );\n  }\n\n  /*\n\n  constructor(props) {\n    super(props);\n    this.user = Object.values(props.navigation.state.params)[0];\n    const keys = Object.keys(this.user.questionRankings);\n    this.state = {\n      matchedQuestions: Object.keys(this.user.questionRankings),\n      questionRankings: {},\n      inProgressQuestionRankings: {},\n    };\n  }\n\n  componentDidMount() {}\n\n  renderQuestion = ({ item }) => {\n    return (\n      <View style={styles.itemContainer}>\n        <Image\n          source={checkMarkIcon}\n          style={{ position: 'absolute', top: 5, right: 5, zIndex: 5 }}\n        />\n        {this.matchQuestionTypeToImage(item) ? (\n          <Image source={this.matchQuestionTypeToImage(item)} />\n        ) : (\n          <Icon name=\"rowing\" />\n        )}\n      </View>\n    );\n  };\n\n  matchQuestionTypeToImage = questionRankings => {\n    switch (questionRankings) {\n      case 'q1':\n        return require('../assets/music.png');\n      case 'q2':\n        return require('../assets/politics.png');\n      case 'q3':\n        return require('../assets/foodIcon.png');\n      case 'q4':\n        return require('../assets/tv.png');\n      case 'q5':\n        return require('../assets/coding.png');\n      default:\n        return undefined;\n    }\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const { matchedQuestions, questions } = this.state;\n\n    const numOfCommonQuestions = Object.values(this.state.matchedQuestions)\n      .length;\n\n    return (\n      <SafeAreaView style={{ flex: 1 }}>\n        <ScrollView contentContainerStyle={styles.container}>\n          <View>\n            <Text>Your shared interest with {this.user.codename}</Text>\n            <Text style={styles.description}>{this.user.description}</Text>\n          </View>\n          <View style={styles.agreeTextContainer}>\n            <Text\n              style={styles.agreeText}\n            >{`You have alot in common with ${this.user.codename}!`}</Text>\n            <Text\n              style={[styles.agreeText, { marginTop: 10 }]}\n            >{`You agree on ${numOfCommonQuestions}/${TOTAL_NUM_OF_QUESTIONS}!`}</Text>\n          </View>\n          <FlatList\n            numColumns={2}\n            data={this.state.matchedQuestions}\n            renderItem={this.renderQuestion}\n            keyExtractor={item => item}\n          />\n        </ScrollView>\n        <View style={styles.introduceButtonContainer}>\n          <TouchableOpacity style={styles.button}>\n            <Image\n              source={require('../assets/message.png')}\n              style={{ position: 'absolute', left: 10, tintColor: '#fff' }}\n            />\n            <Text style={styles.introduceText}>Introduce Yourself</Text>\n          </TouchableOpacity>\n        </View>\n      </SafeAreaView>\n    );\n  }\n  */\n}\n\nconst styles = {\n  container: {\n    flex: 1,\n    paddingTop: 15,\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  flatlistContainer: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  description: {\n    borderWidth: 1,\n    borderColor: 'rgb(151, 151, 151)',\n    backgroundColor: 'rgb(216, 216, 216)',\n    height: 40,\n    marginTop: 10,\n  },\n  text: {\n    textAlign: 'left',\n    fontSize: 32,\n    backgroundColor: 'transparent',\n  },\n  itemContainer: {\n    width: size,\n    height: size,\n    margin: 10,\n    borderColor: 'rgb(0, 145, 255)',\n    borderWidth: 1,\n    borderRadius: 8,\n    overflow: 'hidden',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  item: {\n    flex: 1,\n    margin: 3,\n    backgroundColor: 'lightblue',\n  },\n  titleText: {\n    fontSize: 18,\n  },\n  agreeText: {\n    fontSize: 15,\n    textAlign: 'center',\n    color: 'rgb(53, 64, 82)',\n  },\n  agreeTextContainer: {\n    marginTop: 35,\n  },\n  button: {\n    borderRadius: 5,\n    height: 30,\n    width: 200,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgb(0, 145, 255)',\n  },\n  introduceButtonContainer: {\n    color: '#fff',\n    position: 'absolute',\n    bottom: 25,\n    left: 0,\n    right: 0,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  introduceText: {\n    color: '#fff',\n  },\n};\n","import React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\nimport io from 'socket.io-client';\nimport keymirror from 'keymirror';\nimport uuid from 'uuid/v4';\nimport { IoMdArrowRoundBack } from 'react-icons/io';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport HomeScreen from './containers/HomeScreen';\nimport RoomIntroScreen from './containers/RoomIntroScreen';\nimport QuestionRankerScreen from './containers/QuestionRankerScreen';\nimport RoomScreen from './containers/RoomScreen';\nimport MatchedUserScreen from './containers/MatchedUserScreen';\nimport colors from './lib/colors';\n\nconst AppContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  background-color: ${colors.app};\n`;\n\nconst Header = styled.header`\n  position: relative;\n  min-height: 100vh;\n  max-width: 500px;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n  padding: 20px;\n  ${({ navigating }) =>\n    navigating\n      ? css`\n          transition: opacity 500ms, transform 500ms;\n          opacity: 0;\n          ${({ navigatedBack }) =>\n            navigatedBack === true\n              ? 'transform: translateX(100px);'\n              : 'transform: translateX(-100px);'}\n        `\n      : `\n        transition: opacity 500ms;\n        opacity: 1;\n        transform: translateX(0);\n      `}\n`;\n\nconst BackButtonContainer = styled.div`\n  position: absolute;\n  left: 20px;\n  bottom: 20px;\n`;\n\nconst socket = io();\n\nconst PAGES = keymirror({\n  Home: null,\n  RoomIntro: null,\n  QuestionRanker: null,\n  Room: null,\n  MatchedUser: null,\n});\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      page: PAGES.Home,\n      userId: null,\n      userName: null,\n      userQuestionRankings: null,\n      userMatches: null,\n      roomCode: null,\n      roomName: null,\n      roomSelection: null,\n      navigating: false,\n      navigatedBack: false,\n      devResetCount: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.hydrateFromLocalStorage();\n    socket.on('connect', this.onConnectSocket);\n    socket.on('join_room_success', data => console.log('Successfully joined room: ', data));\n    socket.on('rejoin_room_success', data => console.log('Successfully re-joined room: ', data));\n    socket.on('update_matches', this.onUpdateMatches);\n  }\n\n  hydrateFromLocalStorage = () => {\n    try {\n      const userId = localStorage.getItem('user-id');\n      const userName = localStorage.getItem('user-name');\n      const userQuestionRankings = JSON.parse(localStorage.getItem('user-question-rankings'));\n      const userMatches = JSON.parse(localStorage.getItem('user-matches'));\n      const roomCode = localStorage.getItem('room-code');\n      const roomName = localStorage.getItem('room-name');\n      this.setState({ userId, userName, userQuestionRankings, userMatches, roomCode, roomName });\n      console.log('Hydrating from local storage');\n      console.log(`User ID: ${userId}`);\n      console.log(`User Name: ${userName}`);\n      console.log(`User Question Rankings: `, userQuestionRankings);\n      console.log(`User Matches: `, userMatches);\n      console.log(`Room Code: ${roomCode}`);\n      console.log(`Room Name: ${roomName}`);\n\n      if (userId === null) {\n        const newId = uuid();\n        const modifiedId = newId.replace(/\\W/g, '');\n        console.log('Setting new user id: ', modifiedId);\n        localStorage.setItem('user-id', modifiedId);\n        this.setState({ userId: modifiedId });\n      }\n    } catch (error) {\n      console.log('Local storage hydration error: ', error);\n    }\n  };\n\n  saveUserRoom = (userName, roomCode, roomName) => {\n    try {\n      localStorage.setItem('user-name', userName);\n      localStorage.setItem('room-code', roomCode);\n      localStorage.setItem('room-name', roomName);\n    } catch (error) {\n      console.log('Local storage saving error: ', error);\n    }\n  };\n\n  saveUserQuestionRankings = questionRankings => {\n    try {\n      localStorage.setItem('user-question-rankings', JSON.stringify(questionRankings));\n    } catch (error) {\n      console.log('Local storage saving error: ', error);\n    }\n  };\n\n  saveUserMatches = matches => {\n    try {\n      localStorage.setItem('user-matches', JSON.stringify(matches));\n    } catch (error) {\n      console.log('Local storage saving error: ', error);\n    }\n  };\n\n  onConnectSocket = () => {\n    console.log('Socket connected on the front-end.');\n\n    const { roomCode, userId } = this.state;\n    if (roomCode && userId) {\n      socket.emit('rejoin_room', { roomCode, userId });\n    }\n  };\n\n  onDevReset = () => {\n    const { devResetCount } = this.state;\n\n    let newDevResetCount = devResetCount + 1;\n    if (devResetCount === 0) {\n      localStorage.removeItem('user-question-rankings');\n      this.setState({ userQuestionRankings: null });\n    } else if (devResetCount === 1) {\n      localStorage.removeItem('user-name');\n      localStorage.removeItem('user-id');\n      localStorage.removeItem('room-code');\n      localStorage.removeItem('room-name');\n      window.location.reload();\n    }\n\n    this.setState({ devResetCount: newDevResetCount });\n  };\n\n  onStartCreateRoom = () => {\n    this.setState({ roomSelection: 'create' });\n    this.navigate(PAGES.RoomIntro);\n  };\n\n  onStartJoinRoom = () => {\n    this.setState({ roomSelection: 'join' });\n    this.navigate(PAGES.RoomIntro);\n  };\n\n  onJoinRoom = (room, user) => {\n    const { userId, userQuestionRankings } = this.state;\n    const { roomCode, roomName } = room;\n    const { userName, userDescription } = user;\n\n    socket.emit('join_room', { roomCode, user: { userId, userName, userDescription } });\n    this.setState({ userName, roomCode, roomName });\n    this.navigate(userQuestionRankings == null ? PAGES.QuestionRanker : PAGES.Room);\n    this.saveUserRoom(userName, roomCode, roomName);\n  };\n\n  onRetakeQuestionRanker = () => {\n    this.navigate(PAGES.QuestionRanker, true);\n  };\n\n  onBack = () => {\n    const { page } = this.state;\n\n    switch (page) {\n      case PAGES.RoomIntro:\n        this.navigate(PAGES.Home, true);\n        break;\n      case PAGES.QuestionRanker:\n        this.navigate(PAGES.Home, true);\n        break;\n      case PAGES.Room:\n        this.navigate(PAGES.Home, true);\n        break;\n      case PAGES.MatchedUser:\n        this.navigate(PAGES.Room, true);\n        break;\n      default:\n        break;\n    }\n  };\n\n  onRankAllQuestions = questionRankings => {\n    const { userId, roomCode } = this.state;\n    this.setState({ userQuestionRankings: questionRankings });\n    this.saveUserQuestionRankings(questionRankings);\n    socket.emit('update_question_rankings', {\n      userId,\n      userQuestionRankings: questionRankings,\n      roomCode,\n    });\n  };\n\n  onEnterRoom = () => {\n    this.navigate(PAGES.Room);\n  };\n\n  onUpdateMatches = ({ users, matches }) => {\n    const { userId } = this.state;\n    console.log('Receiving matches: ', matches, users);\n\n    const currentUserMatches = {};\n    for (let matchId in matches) {\n      if (!matchId.includes(userId)) {\n        continue;\n      }\n      const otherUserId = matchId.replace(userId, '');\n      currentUserMatches[otherUserId] = {\n        ...users[otherUserId],\n        ...matches[matchId],\n      };\n    }\n\n    this.setState({ matches: currentUserMatches });\n    this.saveUserMatches(currentUserMatches);\n  };\n\n  navigate = (page, goingBack = false) => {\n    this.setState({ navigating: true, navigatedBack: goingBack });\n    setTimeout(() => this.setState({ page, navigating: false, navigatedBack: false }), 500);\n  };\n\n  render() {\n    const {\n      page,\n      userId,\n      userName,\n      roomSelection,\n      roomCode,\n      roomName,\n      navigating,\n      navigatedBack,\n    } = this.state;\n\n    const backButton = (\n      <BackButtonContainer onClick={this.onBack}>\n        <IoMdArrowRoundBack size=\"35px\" />\n      </BackButtonContainer>\n    );\n\n    let component;\n    switch (page) {\n      case PAGES.Home:\n        component = (\n          <HomeScreen\n            roomNameHint={roomName}\n            onStartCreateRoom={this.onStartCreateRoom}\n            onStartJoinRoom={this.onStartJoinRoom}\n            onClickLogo={this.onDevReset}\n          />\n        );\n        break;\n      case PAGES.RoomIntro:\n        component = (\n          <RoomIntroScreen\n            userNameHint={userName}\n            roomCodeHint={roomCode}\n            roomSelection={roomSelection}\n            onJoinRoom={this.onJoinRoom}\n          />\n        );\n        break;\n      case PAGES.QuestionRanker:\n        component = (\n          <QuestionRankerScreen\n            onRankAll={this.onRankAllQuestions}\n            onEnterRoom={this.onEnterRoom}\n          />\n        );\n        break;\n      case PAGES.Room:\n        component = <RoomScreen onRetakeQuestionRanker={this.onRetakeQuestionRanker} />;\n        break;\n      case PAGES.MatchedUser:\n        component = <MatchedUserScreen />;\n        break;\n      default:\n        component = <h1>{'NO SCREEN'}</h1>;\n    }\n\n    return (\n      <AppContainer>\n        <Header navigating={navigating} navigatedBack={navigatedBack}>\n          {component}\n          {page !== PAGES.Home ? backButton : null}\n        </Header>\n      </AppContainer>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\nimport './styles/normalize.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/iceberg3.2a9a0240.png\";"],"sourceRoot":""}