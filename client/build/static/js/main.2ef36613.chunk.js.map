{"version":3,"sources":["assets/iceberg3.png","lib/colors.js","containers/HomeScreen.js","lib/config.js","containers/RoomIntroScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomeScreenContainer","styled","div","LogoContainer","Logo","LogoImage","img","LogoText","colors","Tagline","ButtonsContainer","ButtonContainer","ButtonSubtitle","HomeScreen","state","error","this","src","logoAsset","resizeMode","Button","block","variant","size","onClick","props","onStartCreateRoom","onStartJoinRoom","Component","CONFIG","window","config","token","api","port","API","StyledForm","Form","FieldContainer","FieldLabel","StyledField","Field","StyledErrorMessage","SubmitButton","BackButtonContainer","RoomIntroScreen","generateRoomCode","length","result","characters","charactersLength","i","charAt","Math","floor","random","onSubmitRoomDetails","values","formik","a","userId","roomSelection","roomCode","roomName","name","description","console","log","fetch","response","json","responseJson","setFieldError","onJoinRoom","generatedRoomCode","roomNameInput","errorCodeName","errorRoomCode","htmlFor","type","placeholder","render","msg","initialValues","validationSchema","Yup","min","max","required","onSubmit","setFieldValue","autoCorrect","autoCapitalize","maxLength","onChange","event","target","value","toUpperCase","disabled","component","rows","onGoBackToHomeScreen","socket","io","PAGES","keymirror","Home","RoomIntro","QuestionerRanker","Room","MatchedUser","App","hydrateUserId","localStorage","getItem","setState","newId","uuid","setItem","data","emit","user","page","on","className","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ef36613.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iceberg3.403e6a5e.png\";","export default {\n  app: '#282c34',\n  appInverse: 'white',\n  logo: 'orange',\n  tagline: '#007bff',\n  subtitle: 'rgb(183, 194, 207)',\n  label: '#007bff',\n};\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Button } from 'react-bootstrap';\n\nimport logoAsset from '../assets/iceberg3.png';\nimport colors from '../lib/colors';\n\nconst HomeScreenContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n`;\n\nconst LogoContainer = styled.div`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nconst Logo = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst LogoImage = styled.img`\n  height: auto;\n  width: 100%;\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nconst LogoText = styled.div`\n  position: absolute;\n  top: 30%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-family: AppleSDGothicNeo-Bold;\n  font-size: 28px;\n  text-align: center;\n  color: ${colors.logo};\n  text-shadow: 2px 2px 4px #000000;\n`;\n\nconst Tagline = styled.div`\n  color: ${colors.tagline};\n  font-family: AppleSDGothicNeo-Regular;\n  font-size: 16px;\n  text-align: center;\n  line-height: 1.25;\n`;\n\nconst ButtonsContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: space-around;\n  padding: 20px 0;\n  margin-bottom: 30px;\n`;\n\nconst ButtonContainer = styled.div`\n  align-items: center;\n`;\n\nconst ButtonSubtitle = styled.div`\n  color: ${colors.subtitle};\n  font-family: AppleSDGothicNeo-Light;\n  font-size: 16px;\n`;\n\nexport default class HomeScreen extends Component {\n  constructor() {\n    super();\n    this.state = { error: false };\n  }\n\n  render() {\n    const { error } = this.state;\n    return (\n      <HomeScreenContainer>\n        <LogoContainer>\n          <Logo>\n            <LogoImage src={logoAsset} resizeMode=\"contain\" />\n            <LogoText>{'Icebreaker'}</LogoText>\n          </Logo>\n          <Tagline>{'The easy way to break the ice'}</Tagline>\n          <Tagline>{'and make better connections'}</Tagline>\n        </LogoContainer>\n        <ButtonsContainer>\n          <ButtonContainer>\n            <Button block variant=\"primary\" size=\"lg\" onClick={this.props.onStartCreateRoom}>\n              {'Create Room'}\n            </Button>\n            <ButtonSubtitle>{\"Let's get this party started!\"}</ButtonSubtitle>\n          </ButtonContainer>{' '}\n          <ButtonContainer>\n            <Button block variant=\"primary\" size=\"lg\" onClick={this.props.onStartJoinRoom}>\n              {'Join Room'}\n            </Button>\n            <ButtonSubtitle>{'Make your entrance and meet some people!'}</ButtonSubtitle>\n          </ButtonContainer>{' '}\n        </ButtonsContainer>\n      </HomeScreenContainer>\n    );\n  }\n}\n\nconst styles = {\n  buttonSubtitle: {},\n};\n","export const CONFIG = window.config || {\n  token: 'Hello DEV Flask',\n  api: 'http://localhost',\n  port: 8000,\n};\nexport const API = `${CONFIG.api}:${CONFIG.port}`;\n","import React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport { Button } from 'react-bootstrap';\nimport { IoMdArrowRoundBack } from 'react-icons/io';\n\nimport colors from '../lib/colors';\nimport { API } from '../lib/config';\n\nconst StyledForm = styled(Form)`\n  flex: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FieldContainer = styled.div`\n  width: 100%;\n  margin-bottom: 20px;\n`;\n\nconst FieldLabel = styled.div`\n  font-size: 20px;\n  color: ${colors.label};\n  text-align: left;\n`;\n\nconst StyledField = styled(Field)`\n  width: 100%;\n  font-size: 20px;\n  padding: 5px 10px;\n\n  :disabled {\n    color: #aaa;\n  }\n`;\n\nconst StyledErrorMessage = styled.div`\n  color: red;\n  text-align: left;\n  font-size: 20px;\n`;\n\nconst SubmitButton = styled(Button)`\n  margin-top: 20px;\n`;\n\nconst BackButtonContainer = styled.div`\n  position: absolute;\n  left: 20px;\n  bottom: 20px;\n`;\n\nexport default class RoomIntroScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      generatedRoomCode: props.roomSelection === 'create' ? this.generateRoomCode() : '',\n    };\n  }\n\n  generateRoomCode = (length = 6) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  };\n\n  onSubmitRoomDetails = async (values, formik) => {\n    const { userId, roomSelection } = this.props;\n    const { roomCode, roomName, name, description } = values;\n    console.log(`Joining room code: ${roomCode}`);\n\n    if (roomSelection === 'create') {\n      const response = await fetch(`${API}/createRoom?roomCode=${roomCode}`);\n      const responseJson = await response.json();\n    } else if (roomSelection === 'join') {\n      const response = await fetch(`${API}/checkRoom?roomCode=${roomCode}`);\n      const responseJson = await response.json();\n      const { error } = responseJson;\n      if (error === true) {\n        formik.setFieldError('roomCode', 'Room code does not exist!');\n      }\n\n      this.props.onJoinRoom(values);\n    }\n  };\n\n  /*\n  _addUser = async roomId => {\n    const userId = (await AsyncStorage.getItem('user-id')) || this.generateUserId(10);\n    const { description, codeName, roomName } = this.state;\n    const { questionList } = this.props.navigation.state.params;\n    const roomState = this.props.navigation.getParam('roomState', 'join');\n\n    console.log('FROM SUIGN UP: ', description, codeName, questionList);\n\n    get_user(roomId, userId, data => {\n      data && data.userId == userId\n        ? this.props.navigation.replace('Room', {\n            roomId,\n            userId,\n            roomState,\n            roomName,\n          })\n        : this.props.navigation.replace('CardSwipe', {\n            roomId,\n            userId,\n            description,\n            codeName,\n            questionList,\n            roomState,\n            roomName,\n          });\n    });\n  };\n\n  _checkRoom = async roomId => {\n    await get_room(roomId, data => {\n      console.log('Found room: ', data);\n      data && data.roomId == roomId\n        ? this.setState({ errorRoomCode: false })\n        : this.setState({ errorRoomCode: true });\n    });\n  };\n\n  */\n\n  render() {\n    const { userId, roomSelection } = this.props;\n    const { generatedRoomCode, roomCode, errorCodeName, errorRoomCode } = this.state;\n\n    let roomNameInput = null;\n    if (roomSelection === 'create') {\n      roomNameInput = (\n        <FieldContainer>\n          <FieldLabel htmlFor=\"roomName\">{'Room Name'}</FieldLabel>\n          <StyledField name=\"roomName\" type=\"text\" placeholder=\"(optional)\" />\n          <ErrorMessage\n            name=\"roomName\"\n            render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n          />\n        </FieldContainer>\n      );\n    }\n\n    return (\n      <Formik\n        initialValues={{\n          roomCode: roomSelection === 'create' ? generatedRoomCode : '',\n          roomName: '',\n          name: '',\n          description: '',\n        }}\n        validationSchema={Yup.object({\n          roomCode: Yup.string()\n            .min(6, 'Must be 6 characters')\n            .max(6, 'Must be 6 characters')\n            .required('*Required'),\n          name: Yup.string().required('*Required'),\n          description: Yup.string().required('*Required'),\n        })}\n        onSubmit={this.onSubmitRoomDetails}\n      >\n        {({ setFieldValue }) => (\n          <StyledForm>\n            <FieldContainer>\n              <FieldLabel htmlFor=\"roomCode\">{`Room Code${\n                roomSelection === 'create' ? ' (autogenerated)' : ''\n              }`}</FieldLabel>\n              <StyledField\n                name=\"roomCode\"\n                type=\"text\"\n                autoCorrect=\"off\"\n                autoCapitalize=\"characters\"\n                maxLength={6}\n                placeholder=\"Enter 6-letter event code\"\n                onChange={event => setFieldValue('roomCode', event.target.value.toUpperCase())}\n                disabled={roomSelection === 'create'}\n              />\n              <ErrorMessage\n                name=\"roomCode\"\n                render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n              />\n            </FieldContainer>\n            {roomNameInput}\n            <FieldContainer>\n              <FieldLabel htmlFor=\"name\">Your Name</FieldLabel>\n              <StyledField name=\"name\" autoCorrect=\"off\" />\n              <ErrorMessage\n                name=\"name\"\n                render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n              />\n            </FieldContainer>\n            <FieldContainer>\n              <FieldLabel htmlFor=\"description\">What do you look like?</FieldLabel>\n              <StyledField\n                name=\"description\"\n                component=\"textarea\"\n                autoCorrect=\"off\"\n                rows={3}\n                placeholder={'e.g., Blonde. Wearing red fedora. Sizeable front teeth.'}\n              />\n              <ErrorMessage\n                name=\"description\"\n                render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n              />\n            </FieldContainer>\n            <SubmitButton variant=\"primary\" size=\"lg\" type=\"submit\" block>\n              {\"Let's do this!\"}\n            </SubmitButton>\n            <BackButtonContainer onClick={this.props.onGoBackToHomeScreen}>\n              <IoMdArrowRoundBack size=\"35px\" />\n            </BackButtonContainer>\n          </StyledForm>\n        )}\n      </Formik>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport keymirror from 'keymirror';\nimport uuid from 'uuid/v4';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport HomeScreen from './containers/HomeScreen';\nimport RoomIntroScreen from './containers/RoomIntroScreen';\nimport { CONFIG } from './lib/config';\n\nimport './styles/App.css';\n\nconst socket = io();\n\nconst questionsConfig = {\n  allQuestionIds: [],\n  questions: {\n    '1': {},\n  },\n};\n\nconst PAGES = keymirror({\n  Home: null,\n  RoomIntro: null,\n  QuestionerRanker: null,\n  Room: null,\n  MatchedUser: null,\n});\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      page: PAGES.Home,\n      userId: null,\n      roomCode: null,\n      roomSelection: null,\n      // page: PAGES.RoomIntro,\n      //roomSelection: 'create',\n      //roomSelection: 'join',\n    };\n  }\n\n  componentDidMount() {\n    this.hydrateUserId();\n    socket.on('connect', () => console.log('Socket connected on the front-end.'));\n    socket.on('join_room_success', data => console.log('Successfully joined room: ', data));\n  }\n\n  hydrateUserId = () => {\n    try {\n      const value = localStorage.getItem('user-id');\n      if (value !== null) {\n        console.log('Hydrating user id: ', value);\n        this.setState({ userId: value });\n      } else {\n        const newId = uuid();\n        console.log('Setting new user id: ', newId);\n        localStorage.setItem('user-id', newId);\n        this.setState({ userId: newId });\n      }\n    } catch (error) {\n      console.log('Local storage error: ', error);\n    }\n  };\n\n  onJoinRoom = data => {\n    const { userId } = this.state;\n    const { roomCode, name, description } = data;\n    socket.emit('join_room', { roomCode, user: { userId, name, description } });\n  };\n\n  renderQuestionPreferenceSelector() {\n    return null;\n  }\n\n  render() {\n    const { page, userId, roomSelection } = this.state;\n\n    let component;\n    switch (page) {\n      case PAGES.Home:\n        component = (\n          <HomeScreen\n            onStartCreateRoom={() =>\n              this.setState({ page: PAGES.RoomIntro, roomSelection: 'create' })\n            }\n            onStartJoinRoom={() => this.setState({ page: PAGES.RoomIntro, roomSelection: 'join' })}\n          />\n        );\n        break;\n      case PAGES.RoomIntro:\n        component = (\n          <RoomIntroScreen\n            userId={userId}\n            roomSelection={roomSelection}\n            onGoBackToHomeScreen={() => this.setState({ page: PAGES.Home })}\n            onJoinRoom={this.onJoinRoom}\n          />\n        );\n        break;\n      default:\n        component = <h1>{'NO SCREEN'}</h1>;\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>{CONFIG.token}</p>\n          {component}\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}