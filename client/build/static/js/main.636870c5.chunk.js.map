{"version":3,"sources":["assets/iceberg3.png","lib/colors.js","containers/HomeScreen.js","lib/config.js","containers/RoomIntroScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomeScreenContainer","styled","div","LogoContainer","Logo","LogoImage","img","LogoText","colors","Tagline","ButtonsContainer","ButtonContainer","ButtonSubtitle","HomeScreen","this","props","roomNameHint","onStartCreateRoom","onStartJoinRoom","joinRoomButtonText","length","src","logoAsset","resizeMode","Button","block","variant","size","onClick","Component","CONFIG","window","config","token","api","port","API","StyledForm","Form","FieldContainer","FieldLabel","StyledField","Field","StyledErrorMessage","SubmitButton","RoomIntroScreen","generateRoomCode","result","characters","charactersLength","i","charAt","Math","floor","random","onSubmitRoomDetails","values","formik","a","roomSelection","onJoinRoom","roomCode","roomName","userName","userDescription","console","log","createUrl","encodeURI","fetch","response","json","responseJson","error","setFieldError","checkUrl","meta","state","generatedRoomCode","userNameHint","roomCodeHint","roomNameInput","htmlFor","name","type","placeholder","render","msg","initialValues","validationSchema","Yup","min","max","required","onSubmit","setFieldValue","autoCorrect","autoCapitalize","maxLength","onChange","event","target","value","toUpperCase","disabled","component","rows","socket","io","PAGES","keymirror","Home","RoomIntro","QuestionerRanker","Room","MatchedUser","BackButtonContainer","App","hydrateFromLocalStorage","userId","localStorage","getItem","setState","modifiedId","uuid","replace","setItem","saveUserRoom","room","user","emit","onBack","page","on","data","backButton","className","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.636870c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iceberg3.2a9a0240.png\";","export default {\n  app: '#282c34',\n  appInverse: 'white',\n  logo: 'orange',\n  tagline: '#007bff',\n  subtitle: 'rgb(183, 194, 207)',\n  label: '#007bff',\n};\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Button } from 'react-bootstrap';\n\nimport logoAsset from '../assets/iceberg3.png';\nimport colors from '../lib/colors';\n\nconst HomeScreenContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n`;\n\nconst LogoContainer = styled.div`\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nconst Logo = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nconst LogoImage = styled.img`\n  height: auto;\n  width: 100%;\n  flex: 1;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nconst LogoText = styled.div`\n  position: absolute;\n  top: 30%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-family: AppleSDGothicNeo-Bold;\n  font-size: 28px;\n  text-align: center;\n  color: ${colors.logo};\n  text-shadow: 2px 2px 4px #000000;\n`;\n\nconst Tagline = styled.div`\n  color: ${colors.tagline};\n  font-family: AppleSDGothicNeo-Regular;\n  font-size: 16px;\n  text-align: center;\n  line-height: 1.25;\n`;\n\nconst ButtonsContainer = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  justify-content: space-around;\n  padding: 20px 0;\n  margin-bottom: 30px;\n`;\n\nconst ButtonContainer = styled.div`\n  align-items: center;\n  margin-bottom: 20px;\n`;\n\nconst ButtonSubtitle = styled.div`\n  color: ${colors.subtitle};\n  font-family: AppleSDGothicNeo-Light;\n  font-size: 16px;\n`;\n\nexport default class HomeScreen extends Component {\n  render() {\n    const { roomNameHint, onStartCreateRoom, onStartJoinRoom } = this.props;\n    const joinRoomButtonText =\n      roomNameHint != null && roomNameHint.length > 0\n        ? `Join Room (${roomNameHint}?)`\n        : 'Join Room';\n    return (\n      <HomeScreenContainer>\n        <LogoContainer>\n          <Logo>\n            <LogoImage src={logoAsset} resizeMode=\"contain\" />\n            <LogoText>{'Icebreaker'}</LogoText>\n          </Logo>\n          <Tagline>{'The easy way to break the ice'}</Tagline>\n          <Tagline>{'and make better connections'}</Tagline>\n        </LogoContainer>\n        <ButtonsContainer>\n          <ButtonContainer>\n            <Button block variant=\"primary\" size=\"lg\" onClick={onStartCreateRoom}>\n              {'Create Room'}\n            </Button>\n            <ButtonSubtitle>{\"Let's get this party started!\"}</ButtonSubtitle>\n          </ButtonContainer>\n          <ButtonContainer>\n            <Button block variant=\"primary\" size=\"lg\" onClick={onStartJoinRoom}>\n              {joinRoomButtonText}\n            </Button>\n            <ButtonSubtitle>{'Make your entrance and meet some people!'}</ButtonSubtitle>\n          </ButtonContainer>\n        </ButtonsContainer>\n      </HomeScreenContainer>\n    );\n  }\n}\n","export const CONFIG = window.config || {\n  token: '((( DEFAULT DEV ENV )))',\n  api: 'http://localhost',\n  port: 8000,\n};\nexport const API = `${CONFIG.api}${CONFIG.port ? `:${CONFIG.port}` : ''}`;\n","import React, { Component } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport styled from 'styled-components';\nimport { Button } from 'react-bootstrap';\n\nimport colors from '../lib/colors';\nimport { API } from '../lib/config';\n\nconst StyledForm = styled(Form)`\n  flex: 1;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FieldContainer = styled.div`\n  width: 100%;\n  margin-bottom: 20px;\n`;\n\nconst FieldLabel = styled.div`\n  font-size: 20px;\n  color: ${colors.label};\n  text-align: left;\n`;\n\nconst StyledField = styled(Field)`\n  width: 100%;\n  font-size: 20px;\n  padding: 5px 10px;\n\n  :disabled {\n    color: #aaa;\n  }\n`;\n\nconst StyledErrorMessage = styled.div`\n  color: red;\n  text-align: left;\n  font-size: 20px;\n`;\n\nconst SubmitButton = styled(Button)`\n  margin-top: 20px;\n`;\n\nexport default class RoomIntroScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      generatedRoomCode: props.roomSelection === 'create' ? this.generateRoomCode() : '',\n    };\n  }\n\n  generateRoomCode = (length = 6) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  };\n\n  onSubmitRoomDetails = async (values, formik) => {\n    const { roomSelection, onJoinRoom } = this.props;\n    const { roomCode, roomName, userName, userDescription } = values;\n    console.log(`Joining room code: ${roomCode}`);\n\n    if (roomSelection === 'create') {\n      const createUrl = encodeURI(`${API}/createRoom?roomCode=${roomCode}&roomName=${roomName}`);\n      const response = await fetch(createUrl);\n      const responseJson = await response.json();\n      const { error } = responseJson;\n      if (error === true) {\n        formik.setFieldError('roomCode', 'Room already exists! Refresh page.');\n      } else {\n        onJoinRoom({ roomCode, roomName }, { userName, userDescription });\n      }\n    } else if (roomSelection === 'join') {\n      const checkUrl = encodeURI(`${API}/checkRoom?roomCode=${roomCode}`);\n      const response = await fetch(checkUrl);\n      const responseJson = await response.json();\n      const { error, meta } = responseJson;\n      if (error === true) {\n        formik.setFieldError('roomCode', 'Room code does not exist!');\n      } else {\n        const { roomName } = meta;\n        onJoinRoom({ roomCode, roomName }, { userName, userDescription });\n      }\n    }\n  };\n\n  /*\n  _addUser = async roomId => {\n    const userId = (await AsyncStorage.getItem('user-id')) || this.generateUserId(10);\n    const { description, codeName, roomName } = this.state;\n    const { questionList } = this.props.navigation.state.params;\n    const roomState = this.props.navigation.getParam('roomState', 'join');\n\n    console.log('FROM SUIGN UP: ', description, codeName, questionList);\n\n    get_user(roomId, userId, data => {\n      data && data.userId == userId\n        ? this.props.navigation.replace('Room', {\n            roomId,\n            userId,\n            roomState,\n            roomName,\n          })\n        : this.props.navigation.replace('CardSwipe', {\n            roomId,\n            userId,\n            description,\n            codeName,\n            questionList,\n            roomState,\n            roomName,\n          });\n    });\n  };\n\n  _checkRoom = async roomId => {\n    await get_room(roomId, data => {\n      console.log('Found room: ', data);\n      data && data.roomId == roomId\n        ? this.setState({ errorRoomCode: false })\n        : this.setState({ errorRoomCode: true });\n    });\n  };\n\n  */\n\n  render() {\n    const { userNameHint, roomCodeHint, roomSelection } = this.props;\n    const { generatedRoomCode } = this.state;\n\n    let roomNameInput = null;\n    if (roomSelection === 'create') {\n      roomNameInput = (\n        <FieldContainer>\n          <FieldLabel htmlFor=\"roomName\">{'Room Name'}</FieldLabel>\n          <StyledField name=\"roomName\" type=\"text\" placeholder=\"(optional)\" />\n          <ErrorMessage\n            name=\"roomName\"\n            render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n          />\n        </FieldContainer>\n      );\n    }\n\n    return (\n      <Formik\n        initialValues={{\n          roomCode:\n            roomSelection === 'create'\n              ? generatedRoomCode\n              : roomCodeHint == null\n              ? ''\n              : roomCodeHint,\n          roomName: '',\n          userName: userNameHint == null ? '' : userNameHint,\n          userDescription: '',\n        }}\n        validationSchema={Yup.object({\n          roomCode: Yup.string()\n            .min(6, 'Must be 6 characters')\n            .max(6, 'Must be 6 characters')\n            .required('*Required'),\n          userName: Yup.string().required('*Required'),\n          userDescription: Yup.string().required('*Required'),\n        })}\n        onSubmit={this.onSubmitRoomDetails}\n      >\n        {({ setFieldValue }) => (\n          <StyledForm>\n            <FieldContainer>\n              <FieldLabel htmlFor=\"roomCode\">{`Room Code${\n                roomSelection === 'create' ? ' (autogenerated)' : ''\n              }`}</FieldLabel>\n              <StyledField\n                name=\"roomCode\"\n                type=\"text\"\n                autoCorrect=\"off\"\n                autoCapitalize=\"characters\"\n                maxLength={6}\n                placeholder=\"Enter 6-letter event code\"\n                onChange={event => setFieldValue('roomCode', event.target.value.toUpperCase())}\n                disabled={roomSelection === 'create'}\n              />\n              <ErrorMessage\n                name=\"roomCode\"\n                render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n              />\n            </FieldContainer>\n            {roomNameInput}\n            <FieldContainer>\n              <FieldLabel htmlFor=\"userName\">Your Name</FieldLabel>\n              <StyledField name=\"userName\" autoCorrect=\"off\" />\n              <ErrorMessage\n                name=\"userName\"\n                render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n              />\n            </FieldContainer>\n            <FieldContainer>\n              <FieldLabel htmlFor=\"userDescription\">What do you look like?</FieldLabel>\n              <StyledField\n                name=\"userDescription\"\n                component=\"textarea\"\n                autoCorrect=\"off\"\n                rows={3}\n                placeholder={'e.g., Blonde. Wearing red fedora. Sizeable front teeth.'}\n              />\n              <ErrorMessage\n                name=\"userDescription\"\n                render={msg => <StyledErrorMessage>{msg}</StyledErrorMessage>}\n              />\n            </FieldContainer>\n            <SubmitButton variant=\"primary\" size=\"lg\" type=\"submit\" block>\n              {\"Let's do this!\"}\n            </SubmitButton>\n          </StyledForm>\n        )}\n      </Formik>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport keymirror from 'keymirror';\nimport uuid from 'uuid/v4';\nimport styled from 'styled-components';\nimport { IoMdArrowRoundBack } from 'react-icons/io';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport HomeScreen from './containers/HomeScreen';\nimport RoomIntroScreen from './containers/RoomIntroScreen';\nimport { CONFIG } from './lib/config';\n\nimport './styles/App.css';\n\nconst socket = io();\n\nconst PAGES = keymirror({\n  Home: null,\n  RoomIntro: null,\n  QuestionerRanker: null,\n  Room: null,\n  MatchedUser: null,\n});\n\nconst BackButtonContainer = styled.div`\n  position: absolute;\n  left: 20px;\n  bottom: 20px;\n`;\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      page: PAGES.Home,\n      userId: null,\n      userName: null,\n      roomCode: null,\n      roomName: null,\n      roomSelection: null,\n      // page: PAGES.RoomIntro,\n      //roomSelection: 'create',\n      //roomSelection: 'join',\n    };\n  }\n\n  componentDidMount() {\n    this.hydrateFromLocalStorage();\n    socket.on('connect', () => console.log('Socket connected on the front-end.'));\n    socket.on('join_room_success', data => console.log('Successfully joined room: ', data));\n  }\n\n  hydrateFromLocalStorage = () => {\n    try {\n      const userId = localStorage.getItem('user-id');\n      const userName = localStorage.getItem('user-name');\n      const roomCode = localStorage.getItem('room-code');\n      const roomName = localStorage.getItem('room-name');\n      this.setState({ userId, userName, roomCode, roomName });\n      console.log(\n        `Hydrating from local storage:\\nUser ID: ${userId}\\nUser Name: ${userName}\\nRoom Code: ${roomCode}\\nRoom Name: ${roomName}`\n      );\n\n      if (userId === null) {\n        const newId = uuid();\n        const modifiedId = newId.replace(/\\W/g, '');\n        console.log('Setting new user id: ', modifiedId);\n        localStorage.setItem('user-id', modifiedId);\n        this.setState({ userId: modifiedId });\n      }\n    } catch (error) {\n      console.log('Local storage hydration error: ', error);\n    }\n  };\n\n  saveUserRoom = (userName, roomCode, roomName) => {\n    try {\n      localStorage.setItem('user-name', userName);\n      localStorage.setItem('room-code', roomCode);\n      localStorage.setItem('room-name', roomName);\n    } catch (error) {\n      console.log('Local storage saving error: ', error);\n    }\n  };\n\n  onJoinRoom = (room, user) => {\n    const { userId } = this.state;\n    const { roomCode, roomName } = room;\n    const { userName, userDescription } = user;\n\n    socket.emit('join_room', { roomCode, user: { userId, userName, userDescription } });\n    this.setState({ userName, roomCode, roomName });\n    this.saveUserRoom(userName, roomCode, roomName);\n  };\n\n  onBack = () => {\n    const { page } = this.state;\n\n    switch (page) {\n      case PAGES.RoomIntro:\n        this.setState({ page: PAGES.Home });\n        break;\n      default:\n        break;\n    }\n  };\n\n  renderQuestionPreferenceSelector() {\n    return null;\n  }\n\n  render() {\n    const { page, userId, userName, roomSelection, roomCode, roomName } = this.state;\n\n    const backButton = (\n      <BackButtonContainer onClick={this.onBack}>\n        <IoMdArrowRoundBack size=\"35px\" />\n      </BackButtonContainer>\n    );\n\n    let component;\n    switch (page) {\n      case PAGES.Home:\n        component = (\n          <HomeScreen\n            roomNameHint={roomName}\n            onStartCreateRoom={() =>\n              this.setState({ page: PAGES.RoomIntro, roomSelection: 'create' })\n            }\n            onStartJoinRoom={() => this.setState({ page: PAGES.RoomIntro, roomSelection: 'join' })}\n          />\n        );\n        break;\n      case PAGES.RoomIntro:\n        component = (\n          <RoomIntroScreen\n            userId={userId}\n            userNameHint={userName}\n            roomCodeHint={roomCode}\n            roomSelection={roomSelection}\n            onJoinRoom={this.onJoinRoom}\n          />\n        );\n        break;\n      default:\n        component = <h1>{'NO SCREEN'}</h1>;\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>{CONFIG.token}</p>\n          {component}\n          {page !== PAGES.Home ? backButton : null}\n        </header>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}